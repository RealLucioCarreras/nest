--- ../xt_NAT.c	2021-02-13 19:48:11.049964364 +0200
+++ ../xt_NAT.c	2021-02-13 21:15:23.795265937 +0200
@@ -571,7 +571,7 @@
     pdu_data_records = 0;
 }
 
-static void netflow_export_flow_v5(const uint8_t proto, const u_int32_t useraddr, const uint16_t userport, const u_int32_t nataddr, const uint16_t natport, const int flags)
+static void netflow_export_flow_v5(const uint8_t proto, const u_int32_t useraddr, const uint16_t userport, const u_int32_t dstaddr, const uint16_t dstport, const u_int32_t nataddr, const uint16_t natport)
 {
     struct netflow5_record *rec;
 
@@ -581,7 +581,7 @@
 
     /* make V5 flow record */
     rec->s_addr	= useraddr;
-    rec->d_addr	= nataddr;
+    rec->d_addr	= dstaddr;
     rec->nexthop	= nataddr;
     rec->i_ifc	= 0;
     rec->o_ifc	= 0;
@@ -589,14 +589,14 @@
     rec->nr_octets	= 0;
     rec->first_ms	= htonl(jiffies_to_msecs(jiffies));
     rec->last_ms	= htonl(jiffies_to_msecs(jiffies));
-    rec->s_port	= userport;
-    rec->d_port	= natport;
+    rec->s_port	= natport;
+    rec->d_port	= dstport;
     //rec->reserved	= 0; /* pdu is always zeroized for v5 in netflow_switch_version */
-    if (flags == 0) {
-        rec->tcp_flags	= TCP_SYN_ACK;
-    } else {
-        rec->tcp_flags  = TCP_FIN_RST;
-    }
+	  
+    rec->tcp_flags	= TCP_SYN_ACK;
+   
+		   
+  
     rec->protocol	= proto;
     rec->tos	= 0;
     rec->s_as	= userport;
@@ -613,7 +613,7 @@
     spin_unlock_bh(&nfsend_lock);
 }
 
-struct nat_htable_ent *create_nat_session(const uint8_t proto, const u_int32_t useraddr, const uint16_t userport, const u_int32_t nataddr)
+struct nat_htable_ent *create_nat_session(const uint8_t proto, const u_int32_t useraddr, const uint16_t userport, const u_int32_t dstaddr, const uint16_t dstport, const u_int32_t nataddr)
 {
     unsigned int hash;
     struct nat_htable_ent *session, *session2;
@@ -718,7 +718,7 @@
 
     update_user_limits(proto, useraddr, 1);
 
-    netflow_export_flow_v5(proto, useraddr, userport, nataddr, natport, 0);
+    netflow_export_flow_v5(proto, useraddr, userport, dstaddr, dstport, nataddr, natport);
 
     atomic64_inc(&sessions_created);
     atomic64_inc(&sessions_active);
@@ -825,7 +825,7 @@
                                                                 return NF_DROP;
                                                         }
                 */
-                session = create_nat_session(ip->protocol, ip->saddr, tcp->source, nat_addr);
+                session = create_nat_session(ip->protocol, ip->saddr, tcp->source, ip->daddr, tcp->dest, nat_addr);
                 if (session == NULL) {
                     printk(KERN_NOTICE "xt_NAT SNAT: Cannot create new session. Dropping packet\n");
                     return NF_DROP;
@@ -876,7 +876,7 @@
                 rcu_read_unlock_bh();
                 //printk(KERN_DEBUG "xt_NAT SNAT: NOT found session for src ip = %pI4 and src port = %d\n", &ip->saddr, ntohs(udp->source));
 
-                session = create_nat_session(ip->protocol, ip->saddr, udp->source, nat_addr);
+                session = create_nat_session(ip->protocol, ip->saddr, udp->source, ip->daddr, udp->dest, nat_addr);
                 if (session == NULL) {
                     printk(KERN_NOTICE "xt_NAT SNAT: Cannot create new session. Dropping packet\n");
                     return NF_DROP;
@@ -935,7 +935,7 @@
                 rcu_read_unlock_bh();
                 //printk(KERN_DEBUG "xt_NAT SNAT: NOT found session for src ip = %pI4 and icmp id = %d\n",&ip->saddr, ntohs(nat_port));
 
-                session = create_nat_session(ip->protocol, ip->saddr, nat_port, nat_addr);
+                session = create_nat_session(ip->protocol, ip->saddr, nat_port, ip->daddr, nat_port, nat_addr);
                 if (session == NULL) {
                     printk(KERN_NOTICE "xt_NAT SNAT: Cannot create new session. Dropping packet\n");
                     return NF_DROP;
@@ -975,7 +975,7 @@
                 rcu_read_unlock_bh();
                 //printk(KERN_DEBUG "xt_NAT SNAT: NOT found session for src ip = %pI4\n",&ip->saddr);
 
-                session = create_nat_session(ip->protocol, ip->saddr, 0, nat_addr);
+                session = create_nat_session(ip->protocol, ip->saddr, 0, ip->daddr, 0, nat_addr);
                 if (session == NULL) {
                     printk(KERN_NOTICE "xt_NAT SNAT: Cannot create new session. Dropping packet\n");
                     return NF_DROP;
@@ -1407,7 +1407,7 @@
             hlist_for_each_entry_safe(session, next, head, list_node) {
                 session->data->timeout -= 10;
                 if (session->data->timeout == 0) {
-                    netflow_export_flow_v5(session->proto, session->addr, session->port, get_nat_addr(session->addr), session->data->out_port, 1);
+                    //netflow_export_flow_v5(session->proto, session->addr, session->port, get_nat_addr(session->addr), session->data->out_port, 1);
                 } else if (session->data->timeout <= -10) {
                     hlist_del_rcu(&session->list_node);
                     ht_inner[i].use--;
