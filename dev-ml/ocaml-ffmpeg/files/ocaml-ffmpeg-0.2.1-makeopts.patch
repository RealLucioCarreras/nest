--- ../src/av_stubs.c	2019-08-11 18:31:56.442748069 +0300
+++ ../src/av_stubs.c	2019-08-11 18:32:00.934753800 +0300
@@ -335,7 +335,7 @@
 
   free(url);
   caml_acquire_runtime_system();
-  if( ! av) Raise(EXN_FAILURE, ocaml_av_error_msg);
+  if( ! av) Raise(EXN_FAILURE, "%s", ocaml_av_error_msg);
 
   // allocate format context
   ans = caml_alloc_custom(&av_ops, sizeof(av_t*), 0, 1);
@@ -354,7 +354,7 @@
   caml_release_runtime_system();
   av_t *av = open_input(NULL, format);
   caml_acquire_runtime_system();
-  if( ! av) Raise(EXN_FAILURE, ocaml_av_error_msg);
+  if( ! av) Raise(EXN_FAILURE, "%s", ocaml_av_error_msg);
 
   // allocate format context
   ans = caml_alloc_custom(&av_ops, sizeof(av_t*), 0, 1);
@@ -527,7 +527,7 @@
       caml_release_runtime_system();                            \
       stream_t * stream = open_stream_index((av), (index));     \
       caml_acquire_runtime_system();                            \
-      if( ! stream) Raise(EXN_FAILURE, ocaml_av_error_msg);     \
+      if( ! stream) Raise(EXN_FAILURE, "%s", ocaml_av_error_msg);     \
     }                                                           \
   }
 
@@ -647,7 +647,7 @@
   Check_stream(av, index);
 
   if(av->release_out) {
-    if( ! alloc_packet_value(&packet_value)) Raise(EXN_FAILURE, ocaml_av_error_msg);
+    if( ! alloc_packet_value(&packet_value)) Raise(EXN_FAILURE, "%s", ocaml_av_error_msg);
   }
   else {
     packet_value = provide_packet_value(&av->streams[index]->packet_value);
@@ -683,7 +683,7 @@
   value frame_kind = 0;
 
   AVFrame * frame = provide_stream_frame(av, stream, &frame_value);
-  if( ! frame) Raise(EXN_FAILURE, ocaml_av_error_msg);
+  if( ! frame) Raise(EXN_FAILURE, "%s", ocaml_av_error_msg);
 
   caml_release_runtime_system();
 
@@ -695,7 +695,7 @@
   }
   caml_acquire_runtime_system();
 
-  if(frame_kind == PVV_Error) Raise(EXN_FAILURE, ocaml_av_error_msg);
+  if(frame_kind == PVV_Error) Raise(EXN_FAILURE, "%s", ocaml_av_error_msg);
 
   if(frame_kind == PVV_End_of_file) {
     ans = PVV_End_of_file;
@@ -716,10 +716,10 @@
   av_t * av = Av_val(_av);
   stream_t ** selected_streams = av->selected_streams ? av->streams : NULL;
 
-  if(! av->streams && ! allocate_input_context(av)) Raise(EXN_FAILURE, ocaml_av_error_msg);
+  if(! av->streams && ! allocate_input_context(av)) Raise(EXN_FAILURE, "%s", ocaml_av_error_msg);
 
   if(av->release_out) {
-    if( ! alloc_packet_value(&packet_value)) Raise(EXN_FAILURE, ocaml_av_error_msg);
+    if( ! alloc_packet_value(&packet_value)) Raise(EXN_FAILURE, "%s", ocaml_av_error_msg);
   }
   else {
     packet_value = provide_packet_value(&av->packet_value);
@@ -760,7 +760,7 @@
   CAMLlocal3(ans, stream_frame, frame_value);
   av_t * av = Av_val(_av);
 
-  if(! av->streams && ! allocate_input_context(av)) Raise(EXN_FAILURE, ocaml_av_error_msg);
+  if(! av->streams && ! allocate_input_context(av)) Raise(EXN_FAILURE, "%s", ocaml_av_error_msg);
 
   AVPacket * packet = Packet_val(provide_packet_value(&av->packet_value));
   stream_t ** streams = av->streams;
@@ -802,7 +802,7 @@
     caml_acquire_runtime_system();
 
     AVFrame * frame = allocate_type_frame(stream->codec_context->codec_type, &frame_value);
-    if( ! frame) Raise(EXN_FAILURE, ocaml_av_error_msg);
+    if( ! frame) Raise(EXN_FAILURE, "%s", ocaml_av_error_msg);
 
     caml_release_runtime_system();
 
@@ -810,7 +810,7 @@
   }
 
   caml_acquire_runtime_system();
-  if(frame_kind == PVV_Error) Raise(EXN_FAILURE, ocaml_av_error_msg);
+  if(frame_kind == PVV_Error) Raise(EXN_FAILURE, "%s", ocaml_av_error_msg);
   
   if(frame_kind == PVV_End_of_file) {
     ans = PVV_End_of_file;
@@ -966,7 +966,7 @@
 
   free(filename);
   caml_acquire_runtime_system();
-  if( ! av) Raise(EXN_FAILURE, ocaml_av_error_msg);
+  if( ! av) Raise(EXN_FAILURE, "%s", ocaml_av_error_msg);
 
   // allocate format context
   ans = caml_alloc_custom(&av_ops, sizeof(av_t*), 0, 1);
@@ -985,7 +985,7 @@
   caml_release_runtime_system();
   av_t *av = open_output(format, NULL, NULL);
   caml_acquire_runtime_system();
-  if( ! av) Raise(EXN_FAILURE, ocaml_av_error_msg);
+  if( ! av) Raise(EXN_FAILURE, "%s", ocaml_av_error_msg);
 
   // allocate format context
   ans = caml_alloc_custom(&av_ops, sizeof(av_t*), 0, 1);
@@ -1006,7 +1006,7 @@
 
   free(format_name);
   caml_acquire_runtime_system();
-  if( ! av) Raise(EXN_FAILURE, ocaml_av_error_msg);
+  if( ! av) Raise(EXN_FAILURE, "%s", ocaml_av_error_msg);
 
   // allocate format context
   ans = caml_alloc_custom(&av_ops, sizeof(av_t*), 0, 1);
@@ -1149,7 +1149,7 @@
                                        rational_of_value(_time_base));
   caml_acquire_runtime_system();
 
-  if( ! stream) Raise(EXN_FAILURE, ocaml_av_error_msg);
+  if( ! stream) Raise(EXN_FAILURE, "%s", ocaml_av_error_msg);
                                        
   CAMLreturn(Val_int(stream->index));
 }
@@ -1194,7 +1194,7 @@
                                        rational_of_value(_time_base));
   caml_acquire_runtime_system();
 
-  if( ! stream) Raise(EXN_FAILURE, ocaml_av_error_msg);
+  if( ! stream) Raise(EXN_FAILURE, "%s", ocaml_av_error_msg);
 
   CAMLreturn(Val_int(stream->index));
 }
@@ -1229,7 +1229,7 @@
                                           rational_of_value(_time_base));
   caml_acquire_runtime_system();
 
-  if( ! stream) Raise(EXN_FAILURE, ocaml_av_error_msg);
+  if( ! stream) Raise(EXN_FAILURE, "%s", ocaml_av_error_msg);
 
   CAMLreturn(Val_int(stream->index));
 }
@@ -1607,7 +1607,7 @@
   }
   caml_acquire_runtime_system();
 
-  if( ! stream) Raise(EXN_FAILURE, ocaml_av_error_msg);
+  if( ! stream) Raise(EXN_FAILURE, "%s", ocaml_av_error_msg);
   CAMLreturn(Val_unit);
 }
 
@@ -1619,7 +1619,7 @@
   caml_release_runtime_system();
   stream_t * stream = write_audio_frame(av, 0, frame);
   caml_acquire_runtime_system();
-  if( ! stream) Raise(EXN_FAILURE, ocaml_av_error_msg);
+  if( ! stream) Raise(EXN_FAILURE, "%s", ocaml_av_error_msg);
 
   CAMLreturn(Val_unit);
 }
@@ -1632,7 +1632,7 @@
   caml_release_runtime_system();
   stream_t * stream = write_video_frame(av, 0, frame);
   caml_acquire_runtime_system();
-  if( ! stream) Raise(EXN_FAILURE, ocaml_av_error_msg);
+  if( ! stream) Raise(EXN_FAILURE, "%s", ocaml_av_error_msg);
 
   CAMLreturn(Val_unit);
 }
@@ -1671,7 +1671,7 @@
 
   caml_acquire_runtime_system();
 
-  if( ! stream) Raise(EXN_FAILURE, ocaml_av_error_msg);
+  if( ! stream) Raise(EXN_FAILURE, "%s", ocaml_av_error_msg);
 
   CAMLreturn(Val_unit);
 }
